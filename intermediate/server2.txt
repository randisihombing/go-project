package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
)

type user struct {
	Name string `json:"name"`
	Age  string `json:"age"`
	City string `json:"city"`
}

func main() {
	port := ":3000"

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// fmt.Fprint(w, "Hello Root Route")
		w.Write([]byte("Hello Root Route"))
		fmt.Println("Hello Root Router")
	})

	http.HandleFunc("/teachers", func(w http.ResponseWriter, r *http.Request) {
		fmt.Println(r.Method)
		switch r.Method {
		case http.MethodGet:
			w.Write([]byte("Hello GET Method on Teachers Route"))
			fmt.Println("Hello GET Method on Teachers Route")
		case http.MethodPost:

			//Parse form data (necessary for x-www-form-urlencoded)
			err := r.ParseForm()
			if err != nil {
				http.Error(w, "Error Parsing Form", http.StatusBadRequest)
				return
			}
			fmt.Println("Form:", r.Form)

			//Prepare response data
			response := make(map[string]interface{})
			for k, v := range r.Form {
				response[k] = v[0]
			}

			fmt.Println("Processed response map", response)

			//RAW Body
			body, err := io.ReadAll(r.Body)
			if err != nil {
				return
			}
			defer r.Body.Close()
			fmt.Println("RAW Body:", body)
			fmt.Println("RAW Body2:", string(body))

			// expect json data, unmarshal
			var userInstance user
			err = json.Unmarshal(body, &userInstance)
			if err != nil {
				return
			}

			fmt.Println("Unmarshaled JSON into an instance user struct", userInstance)
			fmt.Println("Received user name as", userInstance.Name)

			response1 := make(map[string]interface{})
			for k, v := range r.Form {
				response1[k] = v[0]
			}

			err = json.Unmarshal(body, &response1)
			if err != nil {
				return
			}

			fmt.Println("Unmarshaled JSON into a map", response1)

			fmt.Println("Body:", r.Body)
			fmt.Println("Form:", r.Form)
			fmt.Println("Header:", r.Header)
			fmt.Println("Context:", r.Context())
			fmt.Println("ContextLength:", r.ContentLength)
			fmt.Println("Host:", r.Host)
			fmt.Println("Method:", r.Method)
			fmt.Println("Proto:", r.Proto)
			fmt.Println("RemoteAddr:", r.RemoteAddr)
			fmt.Println("RequestURI:", r.RequestURI)
			fmt.Println("TLS:", r.TLS)
			fmt.Println("Trailer:", r.Trailer)
			fmt.Println("TransferEncoding:", r.TransferEncoding)
			fmt.Println("URL:", r.URL)
			fmt.Println("UserAgent:", r.UserAgent())
			fmt.Println("Port:", r.URL.Port())
			fmt.Println("Scheme:", r.URL.Scheme)

			w.Write([]byte("Hello POST Method on Teachers Route"))
			fmt.Println("Hello POST Method on Teachers Route")
		case http.MethodPut:
			w.Write([]byte("Hello PUT Method on Teachers Route"))
			fmt.Println("Hello PUT Method on Teachers Route")
		case http.MethodPatch:
			w.Write([]byte("Hello PATCH Method on Teachers Route"))
			fmt.Println("Hello PATCH Method on Teachers Route")
		case http.MethodDelete:
			w.Write([]byte("Hello DELETE Method on Teachers Route"))
			fmt.Println("Hello DELETE Method on Teachers Route")
		}
		w.Write([]byte("Hello Teachers Route"))
		fmt.Println("Hello Teachers Route")

	})

	http.HandleFunc("/students", func(w http.ResponseWriter, r *http.Request) {
		// fmt.Fprint(w, "Hello Root Route")
		w.Write([]byte("Hello Students Route"))
		fmt.Println("Hello Students Router")
	})

	http.HandleFunc("/execs", func(w http.ResponseWriter, r *http.Request) {
		// fmt.Fprint(w, "Hello Root Route")
		w.Write([]byte("Hello Execs Route"))
		fmt.Println("Hello Execs Router")
	})

	fmt.Println("Server is running in port: ", port)

	err := http.ListenAndServe(port, nil)
	if err != nil {
		log.Fatalln("Error starting the server", err)
	}
}
